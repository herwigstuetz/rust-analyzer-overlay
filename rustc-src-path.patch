diff --git a/crates/ra_project_model/src/sysroot.rs b/crates/ra_project_model/src/sysroot.rs
index 4f6e880d..c39cf3b7 100644
--- a/crates/ra_project_model/src/sysroot.rs
+++ b/crates/ra_project_model/src/sysroot.rs
@@ -1,6 +1,5 @@
 use std::{
     path::{Path, PathBuf},
-    process::Command,
 };
 
 use ra_arena::{impl_arena_id, Arena, RawId};
@@ -32,25 +31,8 @@ impl Sysroot {
         self.crates.iter().map(|(id, _data)| id)
     }
 
-    pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {
-        let rustc_output = Command::new("rustc")
-            .current_dir(cargo_toml.parent().unwrap())
-            .args(&["--print", "sysroot"])
-            .output()?;
-        if !rustc_output.status.success() {
-            Err("failed to locate sysroot")?
-        }
-        let stdout = String::from_utf8(rustc_output.stdout)?;
-        let sysroot_path = Path::new(stdout.trim());
-        let src = sysroot_path.join("lib/rustlib/src/rust/src");
-        if !src.exists() {
-            Err(format!(
-                "can't load standard library from sysroot\n\
-                 {:?}\n\
-                 try running `rustup component add rust-src`",
-                src,
-            ))?;
-        }
+    pub fn discover(_cargo_toml: &Path) -> Result<Sysroot> {
+        let src = PathBuf::from(std::env::var("RUSTC_SRC_PATH").unwrap());
 
         let mut sysroot = Sysroot { crates: Arena::default() };
         for name in SYSROOT_CRATES.trim().lines() {
